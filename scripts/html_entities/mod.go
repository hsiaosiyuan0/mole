package main

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"text/template"

	"github.com/hsiaosiyuan0/mole/scripts/utils"
)

type EntitiesData struct {
	MaxKeyLen int
	Entities  map[string]interface{}
}

func main() {
	// https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references
	resp, err := http.Get("https://html.spec.whatwg.org/entities.json")
	if err != nil {
		log.Fatal(err)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	resp.Body.Close()

	var entities map[string]interface{}
	err = json.Unmarshal(body, &entities)
	if err != nil {
		log.Fatal(err)
	}

	maxKeyLen := 0
	for key := range entities {
		kl := len(key)
		if kl > maxKeyLen {
			maxKeyLen = kl
		}
	}

	tpl, err := template.New("html_entities").Parse(`
// auto-generated by scripts/html_entities.go
package parser

type HTMLEntity struct {
	Name       string
	CodePoints []rune
}

var MaxHTMLEntityName int = {{ .MaxKeyLen }}

var HTMLEntities = map[string]HTMLEntity{
  {{- range $key, $value := .Entities }}
  "{{ $key }}": {"{{ $key }}", []rune{ {{ range $v := $value.codepoints }} {{ $v }}, {{ end }} }},
  {{- end }}
}
  `)
	if err != nil {
		log.Fatal(err)
	}

	var gen bytes.Buffer
	err = tpl.Execute(&gen, &EntitiesData{maxKeyLen, entities})
	if err != nil {
		log.Fatal(err)
	}

	file := "./pkg/js/parser/html_entity.go"
	err = ioutil.WriteFile(file, gen.Bytes(), 0644)
	if err != nil {
		log.Fatal(err)
	}

	utils.Shell("gofmt", "-w", file)
}
