// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[N_ILLEGAL-0]
	_ = x[N_PROG-1]
	_ = x[N_STMT_BEGIN-2]
	_ = x[N_STMT_EMPTY-3]
	_ = x[N_STMT_EXPR-4]
	_ = x[N_STMT_VAR_DEC-5]
	_ = x[N_STMT_FN-6]
	_ = x[N_STMT_BLOCK-7]
	_ = x[N_STMT_DO_WHILE-8]
	_ = x[N_STMT_WHILE-9]
	_ = x[N_STMT_FOR-10]
	_ = x[N_STMT_FOR_IN_OF-11]
	_ = x[N_STMT_IF-12]
	_ = x[N_STMT_SWITCH-13]
	_ = x[N_STMT_BRK-14]
	_ = x[N_STMT_CONT-15]
	_ = x[N_STMT_LABEL-16]
	_ = x[N_STMT_RET-17]
	_ = x[N_STMT_THROW-18]
	_ = x[N_STMT_TRY-19]
	_ = x[N_STMT_DEBUG-20]
	_ = x[N_STMT_WITH-21]
	_ = x[N_STMT_CLASS-22]
	_ = x[N_STMT_IMPORT-23]
	_ = x[N_STMT_EXPORT-24]
	_ = x[N_STMT_END-25]
	_ = x[N_EXPR_BEGIN-26]
	_ = x[N_LIT_BEGIN-27]
	_ = x[N_LIT_NULL-28]
	_ = x[N_LIT_BOOL-29]
	_ = x[N_LIT_NUM-30]
	_ = x[N_LIT_STR-31]
	_ = x[N_LIT_ARR-32]
	_ = x[N_LIT_OBJ-33]
	_ = x[N_LIT_REGEXP-34]
	_ = x[N_LIT_END-35]
	_ = x[N_EXPR_NEW-36]
	_ = x[N_EXPR_MEMBER-37]
	_ = x[N_EXPR_CALL-38]
	_ = x[N_EXPR_BIN-39]
	_ = x[N_EXPR_UNARY-40]
	_ = x[N_EXPR_UPDATE-41]
	_ = x[N_EXPR_COND-42]
	_ = x[N_EXPR_ASSIGN-43]
	_ = x[N_EXPR_FN-44]
	_ = x[N_EXPR_THIS-45]
	_ = x[N_EXPR_PAREN-46]
	_ = x[N_EXPR_ARROW-47]
	_ = x[N_EXPR_SEQ-48]
	_ = x[N_EXPR_CLASS-49]
	_ = x[N_EXPR_TPL-50]
	_ = x[N_EXPR_YIELD-51]
	_ = x[N_EXPR_CHAIN-52]
	_ = x[N_JSX_ELEM-53]
	_ = x[N_NAME-54]
	_ = x[N_IMPORT_CALL-55]
	_ = x[N_META_PROP-56]
	_ = x[N_DECORATOR-57]
	_ = x[N_SPREAD-58]
	_ = x[N_EXPR_END-59]
	_ = x[N_VAR_DEC-60]
	_ = x[N_PAT_REST-61]
	_ = x[N_PAT_ARRAY-62]
	_ = x[N_PAT_ASSIGN-63]
	_ = x[N_PAT_OBJ-64]
	_ = x[N_PROP-65]
	_ = x[N_SWITCH_CASE-66]
	_ = x[N_CATCH-67]
	_ = x[N_CLASS_BODY-68]
	_ = x[N_STATIC_BLOCK-69]
	_ = x[N_METHOD-70]
	_ = x[N_FIELD-71]
	_ = x[N_SUPER-72]
	_ = x[N_IMPORT_SPEC-73]
	_ = x[N_EXPORT_SPEC-74]
	_ = x[N_JSX_BEGIN-75]
	_ = x[N_JSX_ID-76]
	_ = x[N_JSX_MEMBER-77]
	_ = x[N_JSX_NS-78]
	_ = x[N_JSX_ATTR_SPREAD-79]
	_ = x[N_JSX_CHILD_SPREAD-80]
	_ = x[N_JSX_OPEN-81]
	_ = x[N_JSX_CLOSE-82]
	_ = x[N_JSX_EMPTY-83]
	_ = x[N_JSX_EXPR_SPAN-84]
	_ = x[N_JSX_TXT-85]
	_ = x[N_JSX_ATTR-86]
	_ = x[N_JSX_END-87]
	_ = x[N_TS_BEGIN-88]
	_ = x[N_TS_TYP_ANNOT-89]
	_ = x[N_TS_ANY-90]
	_ = x[N_TS_NUM-91]
	_ = x[N_TS_BOOL-92]
	_ = x[N_TS_STR-93]
	_ = x[N_TS_SYM-94]
	_ = x[N_TS_OBJ-95]
	_ = x[N_TS_VOID-96]
	_ = x[N_TS_NEVER-97]
	_ = x[N_TS_UNKNOWN-98]
	_ = x[N_TS_UNDEF-99]
	_ = x[N_TS_BIGINT-100]
	_ = x[N_TS_INTRINSIC-101]
	_ = x[N_TS_NULL-102]
	_ = x[N_TS_LIT-103]
	_ = x[N_TS_REF-104]
	_ = x[N_TS_LIT_OBJ-105]
	_ = x[N_TS_ARR-106]
	_ = x[N_TS_IDX_ACCESS-107]
	_ = x[N_TS_TUPLE-108]
	_ = x[N_TS_REST-109]
	_ = x[N_TS_TUPLE_NAMED_MEMBER-110]
	_ = x[N_TS_OPT-111]
	_ = x[N_TS_TYP_QUERY-112]
	_ = x[N_TS_COND-113]
	_ = x[N_TS_TYP_OP-114]
	_ = x[N_TS_MAPPED-115]
	_ = x[N_TS_TYP_INFER-116]
	_ = x[N_TS_PAREN-117]
	_ = x[N_TS_THIS-118]
	_ = x[N_TS_NS_NAME-119]
	_ = x[N_TS_PARAM-120]
	_ = x[N_TS_PARAM_DEC-121]
	_ = x[N_TS_PARAM_INST-122]
	_ = x[N_TS_PROP-123]
	_ = x[N_TS_CALL_SIG-124]
	_ = x[N_TS_NEW_SIG-125]
	_ = x[N_TS_IDX_SIG-126]
	_ = x[N_TS_FN_TYP-127]
	_ = x[N_TS_NEW-128]
	_ = x[N_TS_UNION_TYP-129]
	_ = x[N_TS_INTERSEC_TYP-130]
	_ = x[N_TS_ROUGH_PARAM-131]
	_ = x[N_TS_TYP_ASSERT-132]
	_ = x[N_TS_TYP_DEC-133]
	_ = x[N_TS_INTERFACE-134]
	_ = x[N_TS_INTERFACE_BODY-135]
	_ = x[N_TS_ENUM-136]
	_ = x[N_TS_ENUM_MEMBER-137]
	_ = x[N_TS_IMPORT_ALIAS-138]
	_ = x[N_TS_NAMESPACE-139]
	_ = x[N_TS_IMPORT_REQUIRE-140]
	_ = x[N_TS_IMPORT_TYP-141]
	_ = x[N_TS_EXPORT_ASSIGN-142]
	_ = x[N_TS_DEC_VAR_DEC-143]
	_ = x[N_TS_DEC_FN-144]
	_ = x[N_TS_DEC_ENUM-145]
	_ = x[N_TS_DEC_CLASS-146]
	_ = x[N_TS_DEC_NS-147]
	_ = x[N_TS_DEC_MODULE-148]
	_ = x[N_TS_DEC_GLOBAL-149]
	_ = x[N_TS_DEC_INTERFACE-150]
	_ = x[N_TS_DEC_TYP_DEC-151]
	_ = x[N_TS_TYP_PREDICATE-152]
	_ = x[N_TS_NO_NULL-153]
	_ = x[N_TS_END-154]
	_ = x[N_NODE_DEF_END-155]
}

const _NodeType_name = "N_ILLEGALN_PROGN_STMT_BEGINN_STMT_EMPTYN_STMT_EXPRN_STMT_VAR_DECN_STMT_FNN_STMT_BLOCKN_STMT_DO_WHILEN_STMT_WHILEN_STMT_FORN_STMT_FOR_IN_OFN_STMT_IFN_STMT_SWITCHN_STMT_BRKN_STMT_CONTN_STMT_LABELN_STMT_RETN_STMT_THROWN_STMT_TRYN_STMT_DEBUGN_STMT_WITHN_STMT_CLASSN_STMT_IMPORTN_STMT_EXPORTN_STMT_ENDN_EXPR_BEGINN_LIT_BEGINN_LIT_NULLN_LIT_BOOLN_LIT_NUMN_LIT_STRN_LIT_ARRN_LIT_OBJN_LIT_REGEXPN_LIT_ENDN_EXPR_NEWN_EXPR_MEMBERN_EXPR_CALLN_EXPR_BINN_EXPR_UNARYN_EXPR_UPDATEN_EXPR_CONDN_EXPR_ASSIGNN_EXPR_FNN_EXPR_THISN_EXPR_PARENN_EXPR_ARROWN_EXPR_SEQN_EXPR_CLASSN_EXPR_TPLN_EXPR_YIELDN_EXPR_CHAINN_JSX_ELEMN_NAMEN_IMPORT_CALLN_META_PROPN_DECORATORN_SPREADN_EXPR_ENDN_VAR_DECN_PAT_RESTN_PAT_ARRAYN_PAT_ASSIGNN_PAT_OBJN_PROPN_SWITCH_CASEN_CATCHN_CLASS_BODYN_STATIC_BLOCKN_METHODN_FIELDN_SUPERN_IMPORT_SPECN_EXPORT_SPECN_JSX_BEGINN_JSX_IDN_JSX_MEMBERN_JSX_NSN_JSX_ATTR_SPREADN_JSX_CHILD_SPREADN_JSX_OPENN_JSX_CLOSEN_JSX_EMPTYN_JSX_EXPR_SPANN_JSX_TXTN_JSX_ATTRN_JSX_ENDN_TS_BEGINN_TS_TYP_ANNOTN_TS_ANYN_TS_NUMN_TS_BOOLN_TS_STRN_TS_SYMN_TS_OBJN_TS_VOIDN_TS_NEVERN_TS_UNKNOWNN_TS_UNDEFN_TS_BIGINTN_TS_INTRINSICN_TS_NULLN_TS_LITN_TS_REFN_TS_LIT_OBJN_TS_ARRN_TS_IDX_ACCESSN_TS_TUPLEN_TS_RESTN_TS_TUPLE_NAMED_MEMBERN_TS_OPTN_TS_TYP_QUERYN_TS_CONDN_TS_TYP_OPN_TS_MAPPEDN_TS_TYP_INFERN_TS_PARENN_TS_THISN_TS_NS_NAMEN_TS_PARAMN_TS_PARAM_DECN_TS_PARAM_INSTN_TS_PROPN_TS_CALL_SIGN_TS_NEW_SIGN_TS_IDX_SIGN_TS_FN_TYPN_TS_NEWN_TS_UNION_TYPN_TS_INTERSEC_TYPN_TS_ROUGH_PARAMN_TS_TYP_ASSERTN_TS_TYP_DECN_TS_INTERFACEN_TS_INTERFACE_BODYN_TS_ENUMN_TS_ENUM_MEMBERN_TS_IMPORT_ALIASN_TS_NAMESPACEN_TS_IMPORT_REQUIREN_TS_IMPORT_TYPN_TS_EXPORT_ASSIGNN_TS_DEC_VAR_DECN_TS_DEC_FNN_TS_DEC_ENUMN_TS_DEC_CLASSN_TS_DEC_NSN_TS_DEC_MODULEN_TS_DEC_GLOBALN_TS_DEC_INTERFACEN_TS_DEC_TYP_DECN_TS_TYP_PREDICATEN_TS_NO_NULLN_TS_ENDN_NODE_DEF_END"

var _NodeType_index = [...]uint16{0, 9, 15, 27, 39, 50, 64, 73, 85, 100, 112, 122, 138, 147, 160, 170, 181, 193, 203, 215, 225, 237, 248, 260, 273, 286, 296, 308, 319, 329, 339, 348, 357, 366, 375, 387, 396, 406, 419, 430, 440, 452, 465, 476, 489, 498, 509, 521, 533, 543, 555, 565, 577, 589, 599, 605, 618, 629, 640, 648, 658, 667, 677, 688, 700, 709, 715, 728, 735, 747, 761, 769, 776, 783, 796, 809, 820, 828, 840, 848, 865, 883, 893, 904, 915, 930, 939, 949, 958, 968, 982, 990, 998, 1007, 1015, 1023, 1031, 1040, 1050, 1062, 1072, 1083, 1097, 1106, 1114, 1122, 1134, 1142, 1157, 1167, 1176, 1199, 1207, 1221, 1230, 1241, 1252, 1266, 1276, 1285, 1297, 1307, 1321, 1336, 1345, 1358, 1370, 1382, 1393, 1401, 1415, 1432, 1448, 1463, 1475, 1489, 1508, 1517, 1533, 1550, 1564, 1583, 1598, 1616, 1632, 1643, 1656, 1670, 1681, 1696, 1711, 1729, 1745, 1763, 1775, 1783, 1797}

func (i NodeType) String() string {
	if i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
