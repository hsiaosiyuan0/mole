// Code generated by script/visitor_gen. DO NOT EDIT.

//go:generate go run github.com/hsiaosiyuan0/mole/script/visitor_gen -d=../parser

package walk

import "github.com/hsiaosiyuan0/mole/ecma/parser"

type VisitorKind uint16

const (
	VK_ILLEGAL               VisitorKind = 0
	VK_CATCH                             = VisitorKind(parser.N_CATCH)
	VK_CLASS_BODY                        = VisitorKind(parser.N_CLASS_BODY)
	VK_DECORATOR                         = VisitorKind(parser.N_DECORATOR)
	VK_EXPORT_SPEC                       = VisitorKind(parser.N_EXPORT_SPEC)
	VK_EXPR_ARROW                        = VisitorKind(parser.N_EXPR_ARROW)
	VK_EXPR_ASSIGN                       = VisitorKind(parser.N_EXPR_ASSIGN)
	VK_EXPR_BIN                          = VisitorKind(parser.N_EXPR_BIN)
	VK_EXPR_CALL                         = VisitorKind(parser.N_EXPR_CALL)
	VK_EXPR_CHAIN                        = VisitorKind(parser.N_EXPR_CHAIN)
	VK_EXPR_CLASS                        = VisitorKind(parser.N_EXPR_CLASS)
	VK_EXPR_COND                         = VisitorKind(parser.N_EXPR_COND)
	VK_EXPR_FN                           = VisitorKind(parser.N_EXPR_FN)
	VK_EXPR_MEMBER                       = VisitorKind(parser.N_EXPR_MEMBER)
	VK_EXPR_NEW                          = VisitorKind(parser.N_EXPR_NEW)
	VK_EXPR_PAREN                        = VisitorKind(parser.N_EXPR_PAREN)
	VK_EXPR_SEQ                          = VisitorKind(parser.N_EXPR_SEQ)
	VK_EXPR_THIS                         = VisitorKind(parser.N_EXPR_THIS)
	VK_EXPR_TPL                          = VisitorKind(parser.N_EXPR_TPL)
	VK_EXPR_UNARY                        = VisitorKind(parser.N_EXPR_UNARY)
	VK_EXPR_UPDATE                       = VisitorKind(parser.N_EXPR_UPDATE)
	VK_EXPR_YIELD                        = VisitorKind(parser.N_EXPR_YIELD)
	VK_FIELD                             = VisitorKind(parser.N_FIELD)
	VK_IMPORT_CALL                       = VisitorKind(parser.N_IMPORT_CALL)
	VK_IMPORT_SPEC                       = VisitorKind(parser.N_IMPORT_SPEC)
	VK_JSX_ATTR                          = VisitorKind(parser.N_JSX_ATTR)
	VK_JSX_ATTR_SPREAD                   = VisitorKind(parser.N_JSX_ATTR_SPREAD)
	VK_JSX_CHILD_SPREAD                  = VisitorKind(parser.N_JSX_CHILD_SPREAD)
	VK_JSX_CLOSE                         = VisitorKind(parser.N_JSX_CLOSE)
	VK_JSX_ELEM                          = VisitorKind(parser.N_JSX_ELEM)
	VK_JSX_EMPTY                         = VisitorKind(parser.N_JSX_EMPTY)
	VK_JSX_EXPR_SPAN                     = VisitorKind(parser.N_JSX_EXPR_SPAN)
	VK_JSX_ID                            = VisitorKind(parser.N_JSX_ID)
	VK_JSX_MEMBER                        = VisitorKind(parser.N_JSX_MEMBER)
	VK_JSX_NS                            = VisitorKind(parser.N_JSX_NS)
	VK_JSX_OPEN                          = VisitorKind(parser.N_JSX_OPEN)
	VK_JSX_TXT                           = VisitorKind(parser.N_JSX_TXT)
	VK_LIT_ARR                           = VisitorKind(parser.N_LIT_ARR)
	VK_LIT_BOOL                          = VisitorKind(parser.N_LIT_BOOL)
	VK_LIT_NULL                          = VisitorKind(parser.N_LIT_NULL)
	VK_LIT_NUM                           = VisitorKind(parser.N_LIT_NUM)
	VK_LIT_OBJ                           = VisitorKind(parser.N_LIT_OBJ)
	VK_LIT_REGEXP                        = VisitorKind(parser.N_LIT_REGEXP)
	VK_LIT_STR                           = VisitorKind(parser.N_LIT_STR)
	VK_META_PROP                         = VisitorKind(parser.N_META_PROP)
	VK_METHOD                            = VisitorKind(parser.N_METHOD)
	VK_NAME                              = VisitorKind(parser.N_NAME)
	VK_PAT_ARRAY                         = VisitorKind(parser.N_PAT_ARRAY)
	VK_PAT_ASSIGN                        = VisitorKind(parser.N_PAT_ASSIGN)
	VK_PAT_OBJ                           = VisitorKind(parser.N_PAT_OBJ)
	VK_PAT_REST                          = VisitorKind(parser.N_PAT_REST)
	VK_PROG                              = VisitorKind(parser.N_PROG)
	VK_PROP                              = VisitorKind(parser.N_PROP)
	VK_SPREAD                            = VisitorKind(parser.N_SPREAD)
	VK_STATIC_BLOCK                      = VisitorKind(parser.N_STATIC_BLOCK)
	VK_STMT_BLOCK                        = VisitorKind(parser.N_STMT_BLOCK)
	VK_STMT_BRK                          = VisitorKind(parser.N_STMT_BRK)
	VK_STMT_CLASS                        = VisitorKind(parser.N_STMT_CLASS)
	VK_STMT_CONT                         = VisitorKind(parser.N_STMT_CONT)
	VK_STMT_DEBUG                        = VisitorKind(parser.N_STMT_DEBUG)
	VK_STMT_DO_WHILE                     = VisitorKind(parser.N_STMT_DO_WHILE)
	VK_STMT_EXPORT                       = VisitorKind(parser.N_STMT_EXPORT)
	VK_STMT_EXPR                         = VisitorKind(parser.N_STMT_EXPR)
	VK_STMT_FN                           = VisitorKind(parser.N_STMT_FN)
	VK_STMT_FOR                          = VisitorKind(parser.N_STMT_FOR)
	VK_STMT_FOR_IN_OF                    = VisitorKind(parser.N_STMT_FOR_IN_OF)
	VK_STMT_IF                           = VisitorKind(parser.N_STMT_IF)
	VK_STMT_IMPORT                       = VisitorKind(parser.N_STMT_IMPORT)
	VK_STMT_LABEL                        = VisitorKind(parser.N_STMT_LABEL)
	VK_STMT_RET                          = VisitorKind(parser.N_STMT_RET)
	VK_STMT_SWITCH                       = VisitorKind(parser.N_STMT_SWITCH)
	VK_STMT_THROW                        = VisitorKind(parser.N_STMT_THROW)
	VK_STMT_TRY                          = VisitorKind(parser.N_STMT_TRY)
	VK_STMT_VAR_DEC                      = VisitorKind(parser.N_STMT_VAR_DEC)
	VK_STMT_WHILE                        = VisitorKind(parser.N_STMT_WHILE)
	VK_STMT_WITH                         = VisitorKind(parser.N_STMT_WITH)
	VK_SUPER                             = VisitorKind(parser.N_SUPER)
	VK_SWITCH_CASE                       = VisitorKind(parser.N_SWITCH_CASE)
	VK_TS_ANY                            = VisitorKind(parser.N_TS_ANY)
	VK_TS_ARR                            = VisitorKind(parser.N_TS_ARR)
	VK_TS_BIGINT                         = VisitorKind(parser.N_TS_BIGINT)
	VK_TS_BOOL                           = VisitorKind(parser.N_TS_BOOL)
	VK_TS_CALL_SIG                       = VisitorKind(parser.N_TS_CALL_SIG)
	VK_TS_COND                           = VisitorKind(parser.N_TS_COND)
	VK_TS_DEC_CLASS                      = VisitorKind(parser.N_TS_DEC_CLASS)
	VK_TS_DEC_ENUM                       = VisitorKind(parser.N_TS_DEC_ENUM)
	VK_TS_DEC_FN                         = VisitorKind(parser.N_TS_DEC_FN)
	VK_TS_DEC_GLOBAL                     = VisitorKind(parser.N_TS_DEC_GLOBAL)
	VK_TS_DEC_INTERFACE                  = VisitorKind(parser.N_TS_DEC_INTERFACE)
	VK_TS_DEC_MODULE                     = VisitorKind(parser.N_TS_DEC_MODULE)
	VK_TS_DEC_NS                         = VisitorKind(parser.N_TS_DEC_NS)
	VK_TS_DEC_TYP_DEC                    = VisitorKind(parser.N_TS_DEC_TYP_DEC)
	VK_TS_DEC_VAR_DEC                    = VisitorKind(parser.N_TS_DEC_VAR_DEC)
	VK_TS_ENUM                           = VisitorKind(parser.N_TS_ENUM)
	VK_TS_ENUM_MEMBER                    = VisitorKind(parser.N_TS_ENUM_MEMBER)
	VK_TS_EXPORT_ASSIGN                  = VisitorKind(parser.N_TS_EXPORT_ASSIGN)
	VK_TS_FN_TYP                         = VisitorKind(parser.N_TS_FN_TYP)
	VK_TS_IDX_ACCESS                     = VisitorKind(parser.N_TS_IDX_ACCESS)
	VK_TS_IDX_SIG                        = VisitorKind(parser.N_TS_IDX_SIG)
	VK_TS_IMPORT_ALIAS                   = VisitorKind(parser.N_TS_IMPORT_ALIAS)
	VK_TS_IMPORT_REQUIRE                 = VisitorKind(parser.N_TS_IMPORT_REQUIRE)
	VK_TS_IMPORT_TYP                     = VisitorKind(parser.N_TS_IMPORT_TYP)
	VK_TS_INTERFACE                      = VisitorKind(parser.N_TS_INTERFACE)
	VK_TS_INTERFACE_BODY                 = VisitorKind(parser.N_TS_INTERFACE_BODY)
	VK_TS_INTERSEC_TYP                   = VisitorKind(parser.N_TS_INTERSEC_TYP)
	VK_TS_INTRINSIC                      = VisitorKind(parser.N_TS_INTRINSIC)
	VK_TS_LIT                            = VisitorKind(parser.N_TS_LIT)
	VK_TS_LIT_OBJ                        = VisitorKind(parser.N_TS_LIT_OBJ)
	VK_TS_MAPPED                         = VisitorKind(parser.N_TS_MAPPED)
	VK_TS_NAMESPACE                      = VisitorKind(parser.N_TS_NAMESPACE)
	VK_TS_NEVER                          = VisitorKind(parser.N_TS_NEVER)
	VK_TS_NEW                            = VisitorKind(parser.N_TS_NEW)
	VK_TS_NEW_SIG                        = VisitorKind(parser.N_TS_NEW_SIG)
	VK_TS_NO_NULL                        = VisitorKind(parser.N_TS_NO_NULL)
	VK_TS_NS_NAME                        = VisitorKind(parser.N_TS_NS_NAME)
	VK_TS_NULL                           = VisitorKind(parser.N_TS_NULL)
	VK_TS_NUM                            = VisitorKind(parser.N_TS_NUM)
	VK_TS_OBJ                            = VisitorKind(parser.N_TS_OBJ)
	VK_TS_OPT                            = VisitorKind(parser.N_TS_OPT)
	VK_TS_PARAM                          = VisitorKind(parser.N_TS_PARAM)
	VK_TS_PARAM_DEC                      = VisitorKind(parser.N_TS_PARAM_DEC)
	VK_TS_PARAM_INST                     = VisitorKind(parser.N_TS_PARAM_INST)
	VK_TS_PAREN                          = VisitorKind(parser.N_TS_PAREN)
	VK_TS_PROP                           = VisitorKind(parser.N_TS_PROP)
	VK_TS_REF                            = VisitorKind(parser.N_TS_REF)
	VK_TS_REST                           = VisitorKind(parser.N_TS_REST)
	VK_TS_ROUGH_PARAM                    = VisitorKind(parser.N_TS_ROUGH_PARAM)
	VK_TS_STR                            = VisitorKind(parser.N_TS_STR)
	VK_TS_SYM                            = VisitorKind(parser.N_TS_SYM)
	VK_TS_THIS                           = VisitorKind(parser.N_TS_THIS)
	VK_TS_TUPLE                          = VisitorKind(parser.N_TS_TUPLE)
	VK_TS_TUPLE_NAMED_MEMBER             = VisitorKind(parser.N_TS_TUPLE_NAMED_MEMBER)
	VK_TS_TYP_ANNOT                      = VisitorKind(parser.N_TS_TYP_ANNOT)
	VK_TS_TYP_ASSERT                     = VisitorKind(parser.N_TS_TYP_ASSERT)
	VK_TS_TYP_DEC                        = VisitorKind(parser.N_TS_TYP_DEC)
	VK_TS_TYP_INFER                      = VisitorKind(parser.N_TS_TYP_INFER)
	VK_TS_TYP_OP                         = VisitorKind(parser.N_TS_TYP_OP)
	VK_TS_TYP_PREDICATE                  = VisitorKind(parser.N_TS_TYP_PREDICATE)
	VK_TS_TYP_QUERY                      = VisitorKind(parser.N_TS_TYP_QUERY)
	VK_TS_UNDEF                          = VisitorKind(parser.N_TS_UNDEF)
	VK_TS_UNION_TYP                      = VisitorKind(parser.N_TS_UNION_TYP)
	VK_TS_UNKNOWN                        = VisitorKind(parser.N_TS_UNKNOWN)
	VK_TS_VOID                           = VisitorKind(parser.N_TS_VOID)
	VK_VAR_DEC                           = VisitorKind(parser.N_VAR_DEC)

	VK_BEFORE_AFTER = VisitorKind(parser.N_NODE_DEF_END) + iota
	VK_CATCH_BEFORE
	VK_CATCH_AFTER
	VK_CLASS_BODY_BEFORE
	VK_CLASS_BODY_AFTER
	VK_DECORATOR_BEFORE
	VK_DECORATOR_AFTER
	VK_EXPORT_SPEC_BEFORE
	VK_EXPORT_SPEC_AFTER
	VK_EXPR_ARROW_BEFORE
	VK_EXPR_ARROW_AFTER
	VK_EXPR_ASSIGN_BEFORE
	VK_EXPR_ASSIGN_AFTER
	VK_EXPR_BIN_BEFORE
	VK_EXPR_BIN_AFTER
	VK_EXPR_CALL_BEFORE
	VK_EXPR_CALL_AFTER
	VK_EXPR_CHAIN_BEFORE
	VK_EXPR_CHAIN_AFTER
	VK_EXPR_CLASS_BEFORE
	VK_EXPR_CLASS_AFTER
	VK_EXPR_COND_BEFORE
	VK_EXPR_COND_AFTER
	VK_EXPR_FN_BEFORE
	VK_EXPR_FN_AFTER
	VK_EXPR_MEMBER_BEFORE
	VK_EXPR_MEMBER_AFTER
	VK_EXPR_NEW_BEFORE
	VK_EXPR_NEW_AFTER
	VK_EXPR_PAREN_BEFORE
	VK_EXPR_PAREN_AFTER
	VK_EXPR_SEQ_BEFORE
	VK_EXPR_SEQ_AFTER
	VK_EXPR_TPL_BEFORE
	VK_EXPR_TPL_AFTER
	VK_EXPR_UNARY_BEFORE
	VK_EXPR_UNARY_AFTER
	VK_EXPR_UPDATE_BEFORE
	VK_EXPR_UPDATE_AFTER
	VK_EXPR_YIELD_BEFORE
	VK_EXPR_YIELD_AFTER
	VK_FIELD_BEFORE
	VK_FIELD_AFTER
	VK_IMPORT_CALL_BEFORE
	VK_IMPORT_CALL_AFTER
	VK_IMPORT_SPEC_BEFORE
	VK_IMPORT_SPEC_AFTER
	VK_JSX_ATTR_BEFORE
	VK_JSX_ATTR_AFTER
	VK_JSX_ATTR_SPREAD_BEFORE
	VK_JSX_ATTR_SPREAD_AFTER
	VK_JSX_CHILD_SPREAD_BEFORE
	VK_JSX_CHILD_SPREAD_AFTER
	VK_JSX_CLOSE_BEFORE
	VK_JSX_CLOSE_AFTER
	VK_JSX_ELEM_BEFORE
	VK_JSX_ELEM_AFTER
	VK_JSX_EXPR_SPAN_BEFORE
	VK_JSX_EXPR_SPAN_AFTER
	VK_JSX_MEMBER_BEFORE
	VK_JSX_MEMBER_AFTER
	VK_JSX_OPEN_BEFORE
	VK_JSX_OPEN_AFTER
	VK_LIT_ARR_BEFORE
	VK_LIT_ARR_AFTER
	VK_LIT_OBJ_BEFORE
	VK_LIT_OBJ_AFTER
	VK_META_PROP_BEFORE
	VK_META_PROP_AFTER
	VK_METHOD_BEFORE
	VK_METHOD_AFTER
	VK_PAT_ARRAY_BEFORE
	VK_PAT_ARRAY_AFTER
	VK_PAT_ASSIGN_BEFORE
	VK_PAT_ASSIGN_AFTER
	VK_PAT_OBJ_BEFORE
	VK_PAT_OBJ_AFTER
	VK_PAT_REST_BEFORE
	VK_PAT_REST_AFTER
	VK_PROG_BEFORE
	VK_PROG_AFTER
	VK_PROP_BEFORE
	VK_PROP_AFTER
	VK_SPREAD_BEFORE
	VK_SPREAD_AFTER
	VK_STATIC_BLOCK_BEFORE
	VK_STATIC_BLOCK_AFTER
	VK_STMT_BLOCK_BEFORE
	VK_STMT_BLOCK_AFTER
	VK_STMT_BRK_BEFORE
	VK_STMT_BRK_AFTER
	VK_STMT_CLASS_BEFORE
	VK_STMT_CLASS_AFTER
	VK_STMT_CONT_BEFORE
	VK_STMT_CONT_AFTER
	VK_STMT_DO_WHILE_BEFORE
	VK_STMT_DO_WHILE_AFTER
	VK_STMT_EXPORT_BEFORE
	VK_STMT_EXPORT_AFTER
	VK_STMT_EXPR_BEFORE
	VK_STMT_EXPR_AFTER
	VK_STMT_FN_BEFORE
	VK_STMT_FN_AFTER
	VK_STMT_FOR_BEFORE
	VK_STMT_FOR_AFTER
	VK_STMT_FOR_IN_OF_BEFORE
	VK_STMT_FOR_IN_OF_AFTER
	VK_STMT_IF_BEFORE
	VK_STMT_IF_AFTER
	VK_STMT_IMPORT_BEFORE
	VK_STMT_IMPORT_AFTER
	VK_STMT_LABEL_BEFORE
	VK_STMT_LABEL_AFTER
	VK_STMT_RET_BEFORE
	VK_STMT_RET_AFTER
	VK_STMT_SWITCH_BEFORE
	VK_STMT_SWITCH_AFTER
	VK_STMT_THROW_BEFORE
	VK_STMT_THROW_AFTER
	VK_STMT_TRY_BEFORE
	VK_STMT_TRY_AFTER
	VK_STMT_VAR_DEC_BEFORE
	VK_STMT_VAR_DEC_AFTER
	VK_STMT_WHILE_BEFORE
	VK_STMT_WHILE_AFTER
	VK_STMT_WITH_BEFORE
	VK_STMT_WITH_AFTER
	VK_SWITCH_CASE_BEFORE
	VK_SWITCH_CASE_AFTER
	VK_TS_ARR_BEFORE
	VK_TS_ARR_AFTER
	VK_TS_CALL_SIG_BEFORE
	VK_TS_CALL_SIG_AFTER
	VK_TS_COND_BEFORE
	VK_TS_COND_AFTER
	VK_TS_DEC_CLASS_BEFORE
	VK_TS_DEC_CLASS_AFTER
	VK_TS_DEC_ENUM_BEFORE
	VK_TS_DEC_ENUM_AFTER
	VK_TS_DEC_FN_BEFORE
	VK_TS_DEC_FN_AFTER
	VK_TS_DEC_GLOBAL_BEFORE
	VK_TS_DEC_GLOBAL_AFTER
	VK_TS_DEC_INTERFACE_BEFORE
	VK_TS_DEC_INTERFACE_AFTER
	VK_TS_DEC_MODULE_BEFORE
	VK_TS_DEC_MODULE_AFTER
	VK_TS_DEC_NS_BEFORE
	VK_TS_DEC_NS_AFTER
	VK_TS_DEC_TYP_DEC_BEFORE
	VK_TS_DEC_TYP_DEC_AFTER
	VK_TS_DEC_VAR_DEC_BEFORE
	VK_TS_DEC_VAR_DEC_AFTER
	VK_TS_ENUM_BEFORE
	VK_TS_ENUM_AFTER
	VK_TS_ENUM_MEMBER_BEFORE
	VK_TS_ENUM_MEMBER_AFTER
	VK_TS_EXPORT_ASSIGN_BEFORE
	VK_TS_EXPORT_ASSIGN_AFTER
	VK_TS_FN_TYP_BEFORE
	VK_TS_FN_TYP_AFTER
	VK_TS_IDX_ACCESS_BEFORE
	VK_TS_IDX_ACCESS_AFTER
	VK_TS_IDX_SIG_BEFORE
	VK_TS_IDX_SIG_AFTER
	VK_TS_IMPORT_ALIAS_BEFORE
	VK_TS_IMPORT_ALIAS_AFTER
	VK_TS_IMPORT_REQUIRE_BEFORE
	VK_TS_IMPORT_REQUIRE_AFTER
	VK_TS_IMPORT_TYP_BEFORE
	VK_TS_IMPORT_TYP_AFTER
	VK_TS_INTERFACE_BEFORE
	VK_TS_INTERFACE_AFTER
	VK_TS_INTERFACE_BODY_BEFORE
	VK_TS_INTERFACE_BODY_AFTER
	VK_TS_INTERSEC_TYP_BEFORE
	VK_TS_INTERSEC_TYP_AFTER
	VK_TS_LIT_BEFORE
	VK_TS_LIT_AFTER
	VK_TS_LIT_OBJ_BEFORE
	VK_TS_LIT_OBJ_AFTER
	VK_TS_MAPPED_BEFORE
	VK_TS_MAPPED_AFTER
	VK_TS_NAMESPACE_BEFORE
	VK_TS_NAMESPACE_AFTER
	VK_TS_NEW_BEFORE
	VK_TS_NEW_AFTER
	VK_TS_NEW_SIG_BEFORE
	VK_TS_NEW_SIG_AFTER
	VK_TS_NO_NULL_BEFORE
	VK_TS_NO_NULL_AFTER
	VK_TS_NS_NAME_BEFORE
	VK_TS_NS_NAME_AFTER
	VK_TS_OPT_BEFORE
	VK_TS_OPT_AFTER
	VK_TS_PARAM_BEFORE
	VK_TS_PARAM_AFTER
	VK_TS_PARAM_DEC_BEFORE
	VK_TS_PARAM_DEC_AFTER
	VK_TS_PARAM_INST_BEFORE
	VK_TS_PARAM_INST_AFTER
	VK_TS_PAREN_BEFORE
	VK_TS_PAREN_AFTER
	VK_TS_PROP_BEFORE
	VK_TS_PROP_AFTER
	VK_TS_REF_BEFORE
	VK_TS_REF_AFTER
	VK_TS_REST_BEFORE
	VK_TS_REST_AFTER
	VK_TS_TUPLE_BEFORE
	VK_TS_TUPLE_AFTER
	VK_TS_TUPLE_NAMED_MEMBER_BEFORE
	VK_TS_TUPLE_NAMED_MEMBER_AFTER
	VK_TS_TYP_ANNOT_BEFORE
	VK_TS_TYP_ANNOT_AFTER
	VK_TS_TYP_ASSERT_BEFORE
	VK_TS_TYP_ASSERT_AFTER
	VK_TS_TYP_DEC_BEFORE
	VK_TS_TYP_DEC_AFTER
	VK_TS_TYP_INFER_BEFORE
	VK_TS_TYP_INFER_AFTER
	VK_TS_TYP_OP_BEFORE
	VK_TS_TYP_OP_AFTER
	VK_TS_TYP_PREDICATE_BEFORE
	VK_TS_TYP_PREDICATE_AFTER
	VK_TS_TYP_QUERY_BEFORE
	VK_TS_TYP_QUERY_AFTER
	VK_TS_UNION_TYP_BEFORE
	VK_TS_UNION_TYP_AFTER
	VK_VAR_DEC_BEFORE
	VK_VAR_DEC_AFTER

	VK_DEF_END
)

type Visitor = func(node parser.Node, key string, ctx *WalkCtx)
type Visitors = [VK_DEF_END][]Visitor

func AddVisitor(vs *Visitors, vk VisitorKind, impl Visitor) {
	hs := vs[vk]
	if hs == nil {
		hs = []Visitor{}
		vs[vk] = hs
	}
	vs[vk] = append(hs, impl)
}

func VisitDoWhileStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.DoWhileStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_DO_WHILE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_DO_WHILE_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitExportDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ExportDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPORT_SPEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPORT_SPEC_AFTER, n, key, ctx)

	VisitNode(n.Dec(), "Dec", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Specs(), "Specs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Src(), "Src", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsPredef(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitTsNoNull(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsNoNull)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_NO_NULL_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_NO_NULL_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitVarDecStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.VarDecStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_VAR_DEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_VAR_DEC_AFTER, n, key, ctx)

	VisitNodes(n, n.DecList(), "DecList", ctx)
	if ctx.stop {
		return
	}
}

func VisitBlockStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.BlockStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_BLOCK_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_BLOCK_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNodes(n, n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitArrLit(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ArrLit)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_LIT_ARR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_LIT_ARR_AFTER, n, key, ctx)

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxClose(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxClose)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_CLOSE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_CLOSE_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}
}

func VisitUpdateExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.UpdateExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_UPDATE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_UPDATE_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitThisExpr(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitLabelStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.LabelStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_LABEL_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_LABEL_AFTER, n, key, ctx)

	VisitNode(n.Label(), "Label", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitImportCall(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ImportCall)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_IMPORT_CALL_BEFORE, n, key, ctx)
	defer CallVisitor(VK_IMPORT_CALL_AFTER, n, key, ctx)

	VisitNode(n.Src(), "Src", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsInferface(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsInferface)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_INTERFACE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_INTERFACE_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.TypParams(), "TypParams", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Supers(), "Supers", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_DEC_TYP_DEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_DEC_TYP_DEC_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Inner(), "Inner", ctx)
	if ctx.stop {
		return
	}
}

func VisitUnaryExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.UnaryExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_UNARY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_UNARY_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitClassDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ClassDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_CLASS_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_CLASS_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Super(), "Super", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxElem(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxElem)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_ELEM_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_ELEM_AFTER, n, key, ctx)

	VisitNode(n.Open(), "Open", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Children(), "Children", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Close(), "Close", ctx)
	if ctx.stop {
		return
	}
}

func VisitSuper(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitBrkStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.BrkStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_BRK_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_BRK_AFTER, n, key, ctx)

	VisitNode(n.Label(), "Label", ctx)
	if ctx.stop {
		return
	}
}

func VisitNumLit(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitMetaProp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.MetaProp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_META_PROP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_META_PROP_AFTER, n, key, ctx)

	VisitNode(n.Meta(), "Meta", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Prop(), "Prop", ctx)
	if ctx.stop {
		return
	}
}

func VisitSwitchCase(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.SwitchCase)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_SWITCH_CASE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_SWITCH_CASE_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Cons(), "Cons", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitStaticBlock(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.StaticBlock)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STATIC_BLOCK_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STATIC_BLOCK_AFTER, n, key, ctx)

	VisitNodes(n, n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxExprSpan(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxExprSpan)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_EXPR_SPAN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_EXPR_SPAN_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsParam(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsParam)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_PARAM_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_PARAM_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Cons(), "Cons", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Default(), "Default", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsOpt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsOpt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_OPT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_OPT_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitArrPat(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ArrPat)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PAT_ARRAY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PAT_ARRAY_AFTER, n, key, ctx)

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitAssignPat(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.AssignPat)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PAT_ASSIGN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PAT_ASSIGN_AFTER, n, key, ctx)

	VisitNode(n.Lhs(), "Lhs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Rhs(), "Rhs", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxOpen(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxOpen)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_OPEN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_OPEN_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Attrs(), "Attrs", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsInferfaceBody(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsInferfaceBody)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_INTERFACE_BODY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_INTERFACE_BODY_AFTER, n, key, ctx)

	VisitNodes(n, n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitCatch(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Catch)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_CATCH_BEFORE, n, key, ctx)
	defer CallVisitor(VK_CATCH_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Param(), "Param", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitProg(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Prog)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PROG_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PROG_AFTER, n, key, ctx)

	VisitNodes(n, n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitSpread(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Spread)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_SPREAD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_SPREAD_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxText(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitTsCallSig(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsCallSig)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_CALL_SIG_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_CALL_SIG_AFTER, n, key, ctx)

	VisitNode(n.TypParams(), "TypParams", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.RetTyp(), "RetTyp", ctx)
	if ctx.stop {
		return
	}
}

func VisitExprStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ExprStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_EXPR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_EXPR_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitFnDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.FnDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_FN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_FN_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	ctx.PushScope()

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitSeqExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.SeqExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_SEQ_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_SEQ_AFTER, n, key, ctx)

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitIdent(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitTsNsName(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsNsName)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_NS_NAME_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_NS_NAME_AFTER, n, key, ctx)

	VisitNode(n.Lhs(), "Lhs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Rhs(), "Rhs", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypAssert(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypAssert)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_ASSERT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_ASSERT_AFTER, n, key, ctx)

	VisitNode(n.Typ(), "Typ", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsParamsInst(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsParamsInst)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_PARAM_INST_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_PARAM_INST_AFTER, n, key, ctx)

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsIdxSig(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsIdxSig)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_IDX_SIG_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_IDX_SIG_AFTER, n, key, ctx)

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.KeyType(), "KeyType", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitChainExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ChainExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_CHAIN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_CHAIN_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitMethod(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Method)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_METHOD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_METHOD_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitJsxSpreadAttr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxSpreadAttr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_ATTR_SPREAD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_ATTR_SPREAD_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTryStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TryStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_TRY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_TRY_AFTER, n, key, ctx)

	VisitNode(n.Try(), "Try", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Catch(), "Catch", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Fin(), "Fin", ctx)
	if ctx.stop {
		return
	}
}

func VisitCondExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.CondExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_COND_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_COND_AFTER, n, key, ctx)

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Cons(), "Cons", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Alt(), "Alt", ctx)
	if ctx.stop {
		return
	}
}

func VisitArrowFn(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ArrowFn)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_ARROW_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_ARROW_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitRestPat(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.RestPat)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PAT_REST_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PAT_REST_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsRoughParam(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitVarDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.VarDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_VAR_DEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_VAR_DEC_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Init(), "Init", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxMember(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxMember)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_MEMBER_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_MEMBER_AFTER, n, key, ctx)

	VisitNode(n.Obj(), "Obj", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Prop(), "Prop", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsMapped(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsMapped)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_MAPPED_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_MAPPED_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypInfer(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypInfer)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_INFER_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_INFER_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsUnionTyp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsUnionTyp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_UNION_TYP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_UNION_TYP_AFTER, n, key, ctx)

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsImportAlias(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsImportAlias)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_IMPORT_ALIAS_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_IMPORT_ALIAS_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitCallExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.CallExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_CALL_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_CALL_AFTER, n, key, ctx)

	VisitNode(n.Callee(), "Callee", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Args(), "Args", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsImportRequire(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsImportRequire)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_IMPORT_REQUIRE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_IMPORT_REQUIRE_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypPredicate(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypPredicate)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_PREDICATE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_PREDICATE_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Typ(), "Typ", ctx)
	if ctx.stop {
		return
	}
}

func VisitIfStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.IfStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_IF_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_IF_AFTER, n, key, ctx)

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Cons(), "Cons", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Alt(), "Alt", ctx)
	if ctx.stop {
		return
	}
}

func VisitWhileStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.WhileStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_WHILE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_WHILE_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitTsTypOp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypOp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_OP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_OP_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_DEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_DEC_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.TypParams(), "TypParams", ctx)
	if ctx.stop {
		return
	}
}

func VisitDecorator(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Decorator)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_DECORATOR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_DECORATOR_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsArr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsArr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_ARR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_ARR_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTuple(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTuple)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TUPLE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TUPLE_AFTER, n, key, ctx)

	VisitNodes(n, n.Args(), "Args", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsIntersecTyp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsIntersecTyp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_INTERSEC_TYP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_INTERSEC_TYP_AFTER, n, key, ctx)

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitWithStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.WithStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_WITH_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_WITH_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxNsName(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitJsxAttr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxAttr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_ATTR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_ATTR_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsParen(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsParen)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_PAREN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_PAREN_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsExportAssign(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsExportAssign)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_EXPORT_ASSIGN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_EXPORT_ASSIGN_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitForStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ForStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_FOR_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_FOR_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNode(n.Init(), "Init", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Update(), "Update", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitTsIdxAccess(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsIdxAccess)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_IDX_ACCESS_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_IDX_ACCESS_AFTER, n, key, ctx)

	VisitNode(n.Obj(), "Obj", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Idx(), "Idx", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsNewSig(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsNewSig)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_NEW_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_NEW_AFTER, n, key, ctx)

	VisitNode(n.TypParams(), "TypParams", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.RetTyp(), "RetTyp", ctx)
	if ctx.stop {
		return
	}
}

func VisitBinExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.BinExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_BIN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_BIN_AFTER, n, key, ctx)

	VisitNode(n.Lhs(), "Lhs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Rhs(), "Rhs", ctx)
	if ctx.stop {
		return
	}
}

func VisitAssignExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.AssignExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_ASSIGN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_ASSIGN_AFTER, n, key, ctx)

	VisitNode(n.Lhs(), "Lhs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Rhs(), "Rhs", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsRef(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsRef)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_REF_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_REF_AFTER, n, key, ctx)

	VisitNode(n.Name(), "Name", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Args(), "Args", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsThis(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitNewExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.NewExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_NEW_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_NEW_AFTER, n, key, ctx)

	VisitNode(n.Callee(), "Callee", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Args(), "Args", ctx)
	if ctx.stop {
		return
	}
}

func VisitProp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Prop)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PROP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PROP_AFTER, n, key, ctx)

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsObj(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsObj)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_LIT_OBJ_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_LIT_OBJ_AFTER, n, key, ctx)

	VisitNodes(n, n.Props(), "Props", ctx)
	if ctx.stop {
		return
	}
}

func VisitThrowStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ThrowStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_THROW_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_THROW_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitStrLit(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitRegLit(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitClassBody(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ClassBody)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_CLASS_BODY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_CLASS_BODY_AFTER, n, key, ctx)

	ctx.PushScope()

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}

	ctx.PopScope()
}

func VisitTsRest(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsRest)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_REST_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_REST_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitSwitchStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.SwitchStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_SWITCH_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_SWITCH_AFTER, n, key, ctx)

	VisitNode(n.Test(), "Test", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Cases(), "Cases", ctx)
	if ctx.stop {
		return
	}
}

func VisitContStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ContStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_CONT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_CONT_AFTER, n, key, ctx)

	VisitNode(n.Label(), "Label", ctx)
	if ctx.stop {
		return
	}
}

func VisitObjPat(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ObjPat)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_PAT_OBJ_BEFORE, n, key, ctx)
	defer CallVisitor(VK_PAT_OBJ_AFTER, n, key, ctx)

	VisitNodes(n, n.Props(), "Props", ctx)
	if ctx.stop {
		return
	}
}

func VisitField(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.Field)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_FIELD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_FIELD_AFTER, n, key, ctx)

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsParamsDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsParamsDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_PARAM_DEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_PARAM_DEC_AFTER, n, key, ctx)

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsEnum(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsEnum)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_ENUM_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_ENUM_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Members(), "Members", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxIdent(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitJsxSpreadChild(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.JsxSpreadChild)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_JSX_CHILD_SPREAD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_JSX_CHILD_SPREAD_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsLit(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsLit)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_LIT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_LIT_AFTER, n, key, ctx)

	VisitNode(n.Lit(), "Lit", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypQuery(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypQuery)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_QUERY_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_QUERY_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsEnumMember(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsEnumMember)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_ENUM_MEMBER_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_ENUM_MEMBER_AFTER, n, key, ctx)

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitImportDec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ImportDec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_IMPORT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_IMPORT_AFTER, n, key, ctx)

	VisitNodes(n, n.Specs(), "Specs", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Src(), "Src", ctx)
	if ctx.stop {
		return
	}
}

func VisitBoolLit(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitTplExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TplExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_TPL_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_TPL_AFTER, n, key, ctx)

	VisitNode(n.Tag(), "Tag", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Elems(), "Elems", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsProp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsProp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_PROP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_PROP_AFTER, n, key, ctx)

	VisitNode(n.Key(), "Key", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitForInOfStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ForInOfStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_FOR_IN_OF_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_FOR_IN_OF_AFTER, n, key, ctx)

	VisitNode(n.Left(), "Left", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Right(), "Right", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTupleNamedMember(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTupleNamedMember)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TUPLE_NAMED_MEMBER_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TUPLE_NAMED_MEMBER_AFTER, n, key, ctx)

	VisitNode(n.Label(), "Label", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Val(), "Val", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsImportType(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsImportType)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_IMPORT_TYP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_IMPORT_TYP_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Qualifier(), "Qualifier", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.TypArg(), "TypArg", ctx)
	if ctx.stop {
		return
	}
}

func VisitRetStmt(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.RetStmt)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_STMT_RET_BEFORE, n, key, ctx)
	defer CallVisitor(VK_STMT_RET_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitParenExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ParenExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_PAREN_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_PAREN_AFTER, n, key, ctx)

	VisitNode(n.Expr(), "Expr", ctx)
	if ctx.stop {
		return
	}
}

func VisitYieldExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.YieldExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_YIELD_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_YIELD_AFTER, n, key, ctx)

	VisitNode(n.Arg(), "Arg", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsTypAnnot(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsTypAnnot)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_TYP_ANNOT_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_TYP_ANNOT_AFTER, n, key, ctx)

	VisitNode(n.TsTyp(), "TsTyp", ctx)
	if ctx.stop {
		return
	}
}

func VisitNullLit(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitMemberExpr(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.MemberExpr)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_EXPR_MEMBER_BEFORE, n, key, ctx)
	defer CallVisitor(VK_EXPR_MEMBER_AFTER, n, key, ctx)

	VisitNode(n.Obj(), "Obj", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Prop(), "Prop", ctx)
	if ctx.stop {
		return
	}
}

func VisitImportSpec(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ImportSpec)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_IMPORT_SPEC_BEFORE, n, key, ctx)
	defer CallVisitor(VK_IMPORT_SPEC_AFTER, n, key, ctx)

	VisitNode(n.Local(), "Local", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsCondType(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsCondType)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_COND_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_COND_AFTER, n, key, ctx)

	VisitNode(n.CheckTyp(), "CheckTyp", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.ExtTyp(), "ExtTyp", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.TrueTyp(), "TrueTyp", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.FalseTyp(), "FalseTyp", ctx)
	if ctx.stop {
		return
	}
}

func VisitDebugStmt(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitObjLit(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.ObjLit)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_LIT_OBJ_BEFORE, n, key, ctx)
	defer CallVisitor(VK_LIT_OBJ_AFTER, n, key, ctx)

	VisitNodes(n, n.Props(), "Props", ctx)
	if ctx.stop {
		return
	}
}

func VisitJsxEmpty(node parser.Node, key string, ctx *WalkCtx) {
}

func VisitTsFnTyp(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsFnTyp)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_FN_TYP_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_FN_TYP_AFTER, n, key, ctx)

	VisitNode(n.TypParams(), "TypParams", ctx)
	if ctx.stop {
		return
	}

	VisitNodes(n, n.Params(), "Params", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.RetTyp(), "RetTyp", ctx)
	if ctx.stop {
		return
	}
}

func VisitTsNS(node parser.Node, key string, ctx *WalkCtx) {
	n := node.(*parser.TsNS)
	ctx.PushVisitorCtx(n, key)
	defer ctx.PopVisitorCtx()

	CallVisitor(VK_TS_NAMESPACE_BEFORE, n, key, ctx)
	defer CallVisitor(VK_TS_NAMESPACE_AFTER, n, key, ctx)

	VisitNode(n.Id(), "Id", ctx)
	if ctx.stop {
		return
	}

	VisitNode(n.Body(), "Body", ctx)
	if ctx.stop {
		return
	}
}

var DefaultVisitors Visitors = [VK_DEF_END][]Visitor{}

func init() {
	DefaultVisitors[VK_CATCH] = []Visitor{VisitCatch}
	DefaultVisitors[VK_CLASS_BODY] = []Visitor{VisitClassBody}
	DefaultVisitors[VK_DECORATOR] = []Visitor{VisitDecorator}
	DefaultVisitors[VK_EXPORT_SPEC] = []Visitor{VisitExportDec}
	DefaultVisitors[VK_EXPR_ARROW] = []Visitor{VisitArrowFn}
	DefaultVisitors[VK_EXPR_ASSIGN] = []Visitor{VisitAssignExpr}
	DefaultVisitors[VK_EXPR_BIN] = []Visitor{VisitBinExpr}
	DefaultVisitors[VK_EXPR_CALL] = []Visitor{VisitCallExpr}
	DefaultVisitors[VK_EXPR_CHAIN] = []Visitor{VisitChainExpr}
	DefaultVisitors[VK_EXPR_CLASS] = []Visitor{VisitClassDec}
	DefaultVisitors[VK_EXPR_COND] = []Visitor{VisitCondExpr}
	DefaultVisitors[VK_EXPR_FN] = []Visitor{VisitFnDec}
	DefaultVisitors[VK_EXPR_MEMBER] = []Visitor{VisitMemberExpr}
	DefaultVisitors[VK_EXPR_NEW] = []Visitor{VisitNewExpr}
	DefaultVisitors[VK_EXPR_PAREN] = []Visitor{VisitParenExpr}
	DefaultVisitors[VK_EXPR_SEQ] = []Visitor{VisitSeqExpr}
	DefaultVisitors[VK_EXPR_THIS] = []Visitor{VisitThisExpr}
	DefaultVisitors[VK_EXPR_TPL] = []Visitor{VisitTplExpr}
	DefaultVisitors[VK_EXPR_UNARY] = []Visitor{VisitUnaryExpr}
	DefaultVisitors[VK_EXPR_UPDATE] = []Visitor{VisitUpdateExpr}
	DefaultVisitors[VK_EXPR_YIELD] = []Visitor{VisitYieldExpr}
	DefaultVisitors[VK_FIELD] = []Visitor{VisitField}
	DefaultVisitors[VK_IMPORT_CALL] = []Visitor{VisitImportCall}
	DefaultVisitors[VK_IMPORT_SPEC] = []Visitor{VisitImportSpec}
	DefaultVisitors[VK_JSX_ATTR] = []Visitor{VisitJsxAttr}
	DefaultVisitors[VK_JSX_ATTR_SPREAD] = []Visitor{VisitJsxSpreadAttr}
	DefaultVisitors[VK_JSX_CHILD_SPREAD] = []Visitor{VisitJsxSpreadChild}
	DefaultVisitors[VK_JSX_CLOSE] = []Visitor{VisitJsxClose}
	DefaultVisitors[VK_JSX_ELEM] = []Visitor{VisitJsxElem}
	DefaultVisitors[VK_JSX_EMPTY] = []Visitor{VisitJsxEmpty}
	DefaultVisitors[VK_JSX_EXPR_SPAN] = []Visitor{VisitJsxExprSpan}
	DefaultVisitors[VK_JSX_ID] = []Visitor{VisitJsxIdent}
	DefaultVisitors[VK_JSX_MEMBER] = []Visitor{VisitJsxMember}
	DefaultVisitors[VK_JSX_NS] = []Visitor{VisitJsxNsName}
	DefaultVisitors[VK_JSX_OPEN] = []Visitor{VisitJsxOpen}
	DefaultVisitors[VK_JSX_TXT] = []Visitor{VisitJsxText}
	DefaultVisitors[VK_LIT_ARR] = []Visitor{VisitArrLit}
	DefaultVisitors[VK_LIT_BOOL] = []Visitor{VisitBoolLit}
	DefaultVisitors[VK_LIT_NULL] = []Visitor{VisitNullLit}
	DefaultVisitors[VK_LIT_NUM] = []Visitor{VisitNumLit}
	DefaultVisitors[VK_LIT_OBJ] = []Visitor{VisitObjLit}
	DefaultVisitors[VK_LIT_REGEXP] = []Visitor{VisitRegLit}
	DefaultVisitors[VK_LIT_STR] = []Visitor{VisitStrLit}
	DefaultVisitors[VK_META_PROP] = []Visitor{VisitMetaProp}
	DefaultVisitors[VK_METHOD] = []Visitor{VisitMethod}
	DefaultVisitors[VK_NAME] = []Visitor{VisitIdent}
	DefaultVisitors[VK_PAT_ARRAY] = []Visitor{VisitArrPat}
	DefaultVisitors[VK_PAT_ASSIGN] = []Visitor{VisitAssignPat}
	DefaultVisitors[VK_PAT_OBJ] = []Visitor{VisitObjPat}
	DefaultVisitors[VK_PAT_REST] = []Visitor{VisitRestPat}
	DefaultVisitors[VK_PROG] = []Visitor{VisitProg}
	DefaultVisitors[VK_PROP] = []Visitor{VisitProp}
	DefaultVisitors[VK_SPREAD] = []Visitor{VisitSpread}
	DefaultVisitors[VK_STATIC_BLOCK] = []Visitor{VisitStaticBlock}
	DefaultVisitors[VK_STMT_BLOCK] = []Visitor{VisitBlockStmt}
	DefaultVisitors[VK_STMT_BRK] = []Visitor{VisitBrkStmt}
	DefaultVisitors[VK_STMT_CLASS] = []Visitor{VisitClassDec}
	DefaultVisitors[VK_STMT_CONT] = []Visitor{VisitContStmt}
	DefaultVisitors[VK_STMT_DEBUG] = []Visitor{VisitDebugStmt}
	DefaultVisitors[VK_STMT_DO_WHILE] = []Visitor{VisitDoWhileStmt}
	DefaultVisitors[VK_STMT_EXPORT] = []Visitor{VisitExportDec}
	DefaultVisitors[VK_STMT_EXPR] = []Visitor{VisitExprStmt}
	DefaultVisitors[VK_STMT_FN] = []Visitor{VisitFnDec}
	DefaultVisitors[VK_STMT_FOR] = []Visitor{VisitForStmt}
	DefaultVisitors[VK_STMT_FOR_IN_OF] = []Visitor{VisitForInOfStmt}
	DefaultVisitors[VK_STMT_IF] = []Visitor{VisitIfStmt}
	DefaultVisitors[VK_STMT_IMPORT] = []Visitor{VisitImportDec}
	DefaultVisitors[VK_STMT_LABEL] = []Visitor{VisitLabelStmt}
	DefaultVisitors[VK_STMT_RET] = []Visitor{VisitRetStmt}
	DefaultVisitors[VK_STMT_SWITCH] = []Visitor{VisitSwitchStmt}
	DefaultVisitors[VK_STMT_THROW] = []Visitor{VisitThrowStmt}
	DefaultVisitors[VK_STMT_TRY] = []Visitor{VisitTryStmt}
	DefaultVisitors[VK_STMT_VAR_DEC] = []Visitor{VisitVarDecStmt}
	DefaultVisitors[VK_STMT_WHILE] = []Visitor{VisitWhileStmt}
	DefaultVisitors[VK_STMT_WITH] = []Visitor{VisitWithStmt}
	DefaultVisitors[VK_SUPER] = []Visitor{VisitSuper}
	DefaultVisitors[VK_SWITCH_CASE] = []Visitor{VisitSwitchCase}
	DefaultVisitors[VK_TS_ANY] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_ARR] = []Visitor{VisitTsArr}
	DefaultVisitors[VK_TS_BIGINT] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_BOOL] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_CALL_SIG] = []Visitor{VisitTsCallSig}
	DefaultVisitors[VK_TS_COND] = []Visitor{VisitTsCondType}
	DefaultVisitors[VK_TS_DEC_CLASS] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_ENUM] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_FN] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_GLOBAL] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_INTERFACE] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_MODULE] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_NS] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_TYP_DEC] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_DEC_VAR_DEC] = []Visitor{VisitTsDec}
	DefaultVisitors[VK_TS_ENUM] = []Visitor{VisitTsEnum}
	DefaultVisitors[VK_TS_ENUM_MEMBER] = []Visitor{VisitTsEnumMember}
	DefaultVisitors[VK_TS_EXPORT_ASSIGN] = []Visitor{VisitTsExportAssign}
	DefaultVisitors[VK_TS_FN_TYP] = []Visitor{VisitTsFnTyp}
	DefaultVisitors[VK_TS_IDX_ACCESS] = []Visitor{VisitTsIdxAccess}
	DefaultVisitors[VK_TS_IDX_SIG] = []Visitor{VisitTsIdxSig}
	DefaultVisitors[VK_TS_IMPORT_ALIAS] = []Visitor{VisitTsImportAlias}
	DefaultVisitors[VK_TS_IMPORT_REQUIRE] = []Visitor{VisitTsImportRequire}
	DefaultVisitors[VK_TS_IMPORT_TYP] = []Visitor{VisitTsImportType}
	DefaultVisitors[VK_TS_INTERFACE] = []Visitor{VisitTsInferface}
	DefaultVisitors[VK_TS_INTERFACE_BODY] = []Visitor{VisitTsInferfaceBody}
	DefaultVisitors[VK_TS_INTERSEC_TYP] = []Visitor{VisitTsIntersecTyp}
	DefaultVisitors[VK_TS_INTRINSIC] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_LIT] = []Visitor{VisitTsLit}
	DefaultVisitors[VK_TS_LIT_OBJ] = []Visitor{VisitTsObj}
	DefaultVisitors[VK_TS_MAPPED] = []Visitor{VisitTsMapped}
	DefaultVisitors[VK_TS_NAMESPACE] = []Visitor{VisitTsNS}
	DefaultVisitors[VK_TS_NEVER] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_NEW] = []Visitor{VisitTsNewSig}
	DefaultVisitors[VK_TS_NEW_SIG] = []Visitor{VisitTsNewSig}
	DefaultVisitors[VK_TS_NO_NULL] = []Visitor{VisitTsNoNull}
	DefaultVisitors[VK_TS_NS_NAME] = []Visitor{VisitTsNsName}
	DefaultVisitors[VK_TS_NULL] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_NUM] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_OBJ] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_OPT] = []Visitor{VisitTsOpt}
	DefaultVisitors[VK_TS_PARAM] = []Visitor{VisitTsParam}
	DefaultVisitors[VK_TS_PARAM_DEC] = []Visitor{VisitTsParamsDec}
	DefaultVisitors[VK_TS_PARAM_INST] = []Visitor{VisitTsParamsInst}
	DefaultVisitors[VK_TS_PAREN] = []Visitor{VisitTsParen}
	DefaultVisitors[VK_TS_PROP] = []Visitor{VisitTsProp}
	DefaultVisitors[VK_TS_REF] = []Visitor{VisitTsRef}
	DefaultVisitors[VK_TS_REST] = []Visitor{VisitTsRest}
	DefaultVisitors[VK_TS_ROUGH_PARAM] = []Visitor{VisitTsRoughParam}
	DefaultVisitors[VK_TS_STR] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_SYM] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_THIS] = []Visitor{VisitTsThis}
	DefaultVisitors[VK_TS_TUPLE] = []Visitor{VisitTsTuple}
	DefaultVisitors[VK_TS_TUPLE_NAMED_MEMBER] = []Visitor{VisitTsTupleNamedMember}
	DefaultVisitors[VK_TS_TYP_ANNOT] = []Visitor{VisitTsTypAnnot}
	DefaultVisitors[VK_TS_TYP_ASSERT] = []Visitor{VisitTsTypAssert}
	DefaultVisitors[VK_TS_TYP_DEC] = []Visitor{VisitTsTypDec}
	DefaultVisitors[VK_TS_TYP_INFER] = []Visitor{VisitTsTypInfer}
	DefaultVisitors[VK_TS_TYP_OP] = []Visitor{VisitTsTypOp}
	DefaultVisitors[VK_TS_TYP_PREDICATE] = []Visitor{VisitTsTypPredicate}
	DefaultVisitors[VK_TS_TYP_QUERY] = []Visitor{VisitTsTypQuery}
	DefaultVisitors[VK_TS_UNDEF] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_UNION_TYP] = []Visitor{VisitTsUnionTyp}
	DefaultVisitors[VK_TS_UNKNOWN] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_TS_VOID] = []Visitor{VisitTsPredef}
	DefaultVisitors[VK_VAR_DEC] = []Visitor{VisitVarDec}
}
