package main

import (
	"bytes"
	"flag"
	"go/ast"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path"
	"text/template"

	"github.com/hsiaosiyuan0/mole/script/macro"
	"github.com/hsiaosiyuan0/mole/util"
)

func genNodetypeString(output io.Writer, nodetypes []string, nodetypeStrings map[string]string) error {
	tpl, err := template.New("nodetype_string").Parse(`

var nodetypeStrings = map[NodeType]string{}

func init() {
  {{- range $key, $value := .NodetypeStrings }}
    nodetypeStrings[{{ $key }}] = "{{ $value }}"
  {{- end }}
}

func (nt NodeType) String() string {
  return nodetypeStrings[nt]
}
  `)
	if err != nil {
		return err
	}
	return tpl.Execute(output, map[string]interface{}{
		"Nodetypes":       nodetypes,
		"NodetypeStrings": nodetypeStrings,
	})
}

func main() {

	wd, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	distFile := path.Join(wd, "nodetype_string.go")
	_, err = os.Stat(distFile)

	if err != nil {
		return
	}

	var defDir string
	flag.StringVar(&defDir, "d", "", "the AST definition directory, relative with current file")
	flag.Parse()

	ctxs, _, err := macro.MacroCtxsOfWorkingDir(wd, defDir)

	if err != nil {
		log.Fatal(err)
	}

	nodetypes := []string{}
	nodetypStrings := map[string]string{}

	// fullfill `nodeTypStruct` and `structColl`
	for _, ctx := range ctxs {
		if ctx.Name != "visitor" {
			continue
		}
		if v, ok := ctx.Node.(*ast.ValueSpec); ok {
			nodetype := v.Names[0].Name
			str := ctx.Args[0].(string)
			nodetypes = append(nodetypes, nodetype)
			nodetypStrings[nodetype] = str
		}
	}

	var buf bytes.Buffer
	buf.WriteString(`// Code generated by script/nodetype_gen. DO NOT EDIT.

//go:generate go run github.com/hsiaosiyuan0/mole/script/nodetype_gen -d=../parser

package parser

  `)

	genNodetypeString(&buf, nodetypes, nodetypStrings)

	ioutil.WriteFile(distFile, buf.Bytes(), 0644)
	util.Shell("gofmt", "-w", distFile)
}
